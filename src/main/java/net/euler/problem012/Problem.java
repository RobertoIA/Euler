package net.euler.problem012;

import java.util.ArrayList;
import java.util.List;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
public class Problem {
	public static void main(String[] args) {
		System.out.println(triangleNumber(500));
	}

	static int triangleNumber(int divisors) {
		int triangleIndex = 1;
		int triangleNumber = 0;
		do {
			triangleNumber += triangleIndex;
			triangleIndex++;
			int size = factors(triangleNumber).size();
			if (size >= divisors)
				return triangleNumber;
		} while (true);
	}

	static List<Integer> factors(int number) {
		List<Integer> factors = new ArrayList<>();
		for (int i = 1; i <= number / 2; i++)
			if (number % i == 0)
				factors.add(i);
		factors.add(number);

		return factors;
	}
}
